using System;
using System.Reflection;

public class RestApi
{
    private string baseUrl;
    private ClassBuilder classBuilder;
    public AssemblyName assemblyName;

    public RestApi(string baseUrl)
    {
        classBuilder = new ClassBuilder();
        assemblyName = typeof(RestApi).Assembly.GetName();
        this.baseUrl = baseUrl;
    }

    public T create<T>()
    {
        Type dynamicType = classBuilder.CreateClass(typeof(T), assemblyName);
        return (T)Activator.CreateInstance(dynamicType);
        // var className = "AutoGenerated" + typeof(T).Name;
        // var typeName = typeof(T).AssemblyQualifiedName.Replace(typeof(T).Name, className);
        // var generatedType = Type.GetType(typeName);
        // return (T)Activator.CreateInstance(generatedType);
    }

    public class Builder
    {
        private string _baseUrl;

        public Builder baseUrl(string baseUrl)
        {
            this._baseUrl = baseUrl;
            return this;
        }

        public RestApi build()
        {
            return new RestApi(this._baseUrl);
        }
    }

}